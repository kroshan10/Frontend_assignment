{"version":3,"file":"static/js/516.f7ab0d01.chunk.js","mappings":"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","sources":["components/Input.tsx","components/RadioButton.tsx","components/pages/CreateContact.tsx"],"sourcesContent":["import React from \"react\";\n\nconst Input = ({ label, placeholder, onChange,value,name }: any) => {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <p className=\"text-primary font-medium\">{label}</p>\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        onChange={onChange}\n        value={value}\n        name={name}\n        className=\"outline-cyan p-3 lg:w-[280px] text-base border border-secondary rounded placeholder:text-[#808080]\"\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import { styled } from \"@mui/material/styles\";\nimport RadioGroup, { useRadioGroup } from \"@mui/material/RadioGroup\";\nimport FormControlLabel, {\n  FormControlLabelProps,\n} from \"@mui/material/FormControlLabel\";\nimport Radio from \"@mui/material/Radio\";\nimport React from \"react\";\n\ninterface Props {\n  name?: string;\n  items: any;\n  onChange: any;\n  size?: any;\n  checked?: boolean;\n  row?: boolean;\n  defaultValue?: string;\n}\n\ninterface StyledFormControlLabelProps extends FormControlLabelProps {\n  checked: boolean;\n}\n\nconst StyledFormControlLabel = styled((props: StyledFormControlLabelProps) => (\n  <FormControlLabel {...props} />\n))(({ checked }) => ({\n  \".MuiFormControlLabel-label\": checked\n    ? { color: \"#323232\" }\n    : { color: \"#323232\" },\n}));\n\nconst MyFormControlLabel = (props: FormControlLabelProps) => {\n  const radioGroup = useRadioGroup();\n\n  let checked = false;\n\n  if (radioGroup) {\n    checked = radioGroup.value === props.value;\n  }\n\n  return <StyledFormControlLabel checked={checked} {...props} />;\n};\n\nconst RadioButton: React.FC<Props> = ({\n  items,\n  name,\n  onChange,\n  checked,\n  defaultValue,\n  row,\n}) => (\n  <div className=\" w-full\">\n    {\" \"}\n    <RadioGroup name={name} defaultValue={defaultValue}>\n      <div className={`${row ? \"flex\" : \"\"}`}>\n        {\" \"}\n        {React.Children.toArray(\n          items.map((e: any) => (\n            <MyFormControlLabel\n              value={e?.value}\n              label={e?.label}\n              control={\n                <Radio\n                  checked={checked}\n                  onChange={onChange}\n                  sx={{\n                    \"&.Mui-checked\": {\n                      color: \"#00c7ff\",\n                    },\n                    \"&.Mui-unchecked\": {\n                      color: \"#323232\",\n                    },\n                  }}\n                />\n              }\n            />\n          ))\n        )}\n      </div>\n    </RadioGroup>\n  </div>\n);\n\nexport default RadioButton;\n","import React, { useEffect, useState } from \"react\";\nimport Sidebar from \"../Sidebar\";\nimport Button from \"../Button\";\nimport Input from \"../Input\";\nimport RadioButton from \"../RadioButton\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../middleware/store\";\nimport { updateContact } from \"../middleware/store\";\nimport { showToastMessage } from \"../utils/helpers\";\nimport { nanoid } from \"nanoid\";\n\nconst radioItems = [\n  {\n    label: \"Active\",\n    value: \"Active\",\n  },\n  {\n    label: \"Inactive\",\n    value: \"Inactive\",\n  },\n];\n\nconst CreateContact = ({ edit }: any) => {\n  // getting data from Link component for edit contact\n  const { state } = useLocation();\n\n  console.log(state, \"from edit route\");\n\n  const dispatch = useDispatch();\n\n  // settings current contact details\n  useEffect(() => {\n    setParams({\n      firstName: state?.firstName,\n      lastName: state?.lastName,\n      status: state?.status,\n    });\n  }, [state]);\n\n  // initial params\n  const initialStates = {\n    firstName: \"\",\n    lastName: \"\",\n    status: \"\",\n  };\n\n  const [params, setParams] = useState(initialStates);\n  console.log(params);\n\n  // to capture user input\n  const handleChange = (e: any) => {\n    const { name, value } = e.target;\n    setParams({ ...params, [name]: value });\n  };\n\n  // to handle radio input\n  const handleRadio = (e: any) => {\n    setParams({ ...params, status: e.target.value });\n  };\n\n  const navigate = useNavigate();\n\n  // to create a new contact\n  const handleSubmit = () => {\n    // console.log(params)\n    // if (\n    //   params?.firstName === \"\" ||\n    //   params?.lastName == \"\" ||\n    //   params?.status == \"\"\n    // ) {\n    //   showToastMessage(\"Please enter valid details\", \"error\");\n    //   return;\n    // }\n    // else{\n    //   dispatch(addContact({ ...params, id: nanoid() }));\n    //   navigate('/contacts')\n    // }\n\n    dispatch(addContact({ ...params, id: nanoid() }));\n    navigate(\"/contacts\");\n  };\n\n  // to update the existing contact details\n  const handleUpdate = () => {\n    dispatch(updateContact({ ...params, id: state.id }));\n    navigate(\"/contacts\");\n  };\n\n  return (\n    <div className=\"flex lg:flex-row flex-col\">\n      <Sidebar />\n      <div className=\"lg:w-[1190px] w-full\">\n        <p className=\"text-center text-lg font-medium text-primary p-4 uppercase tracking-widest\">\n          {edit ? \"Edit Contact\" : \"Create Contact\"}\n        </p>\n\n        <div className=\"border border-primary lg:w-[450px] lg:m-auto m-5 p-4 rounded flex flex-col gap-5\">\n          <Input\n            label=\"First Name\"\n            placeholder=\"John\"\n            onChange={handleChange}\n            value={params.firstName}\n            name=\"firstName\"\n          />\n\n          <Input\n            label=\"Last Name\"\n            placeholder=\"Hancock\"\n            onChange={handleChange}\n            value={params.lastName}\n            name=\"lastName\"\n          />\n\n          <div className=\"flex items-center lg:gap-[85px] lg:justify-start md:justify-between gap-12\">\n            <p className=\"text-primary font-medium\">Status</p>\n\n            <div className=\"w-[100px]\">\n              <RadioButton\n                // name=\"status\"\n                onChange={handleRadio}\n                items={radioItems}\n                defaultValue={edit ? state.status : params?.status}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-center items-center\">\n            {/* <Link to=\"/contacts\"> */}\n            <Button\n              onClick={edit ? handleUpdate : handleSubmit}\n              text={edit ? \"Update\" : \"Submit\"}\n              width=\"lg:w-[300px] rounded\"\n            />\n            {/* </Link> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateContact;\n"],"names":["_ref","label","placeholder","onChange","value","name","_jsxs","className","children","_jsx","type","StyledFormControlLabel","styled","props","FormControlLabel","_objectSpread","checked","color","MyFormControlLabel","radioGroup","useRadioGroup","_ref2","items","defaultValue","row","RadioGroup","concat","React","map","e","control","Radio","sx","radioItems","edit","state","useLocation","console","log","dispatch","useDispatch","useEffect","setParams","firstName","lastName","status","_useState","useState","_useState2","_slicedToArray","params","handleChange","_e$target","target","_defineProperty","navigate","useNavigate","Sidebar","Input","RadioButton","Button","onClick","updateContact","id","addContact","nanoid","text","width"],"sourceRoot":""}